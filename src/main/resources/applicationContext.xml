<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
        xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd 
	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd 
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
	   
  <!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入-->
  <context:component-scan base-package="com.huayu" /> 
	
	<!-- =============================================================== -->
	<!-- Resources                                                       -->
	<!-- =============================================================== -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>

	<!-- =============================================================== -->
	<!-- Data Source                                                     -->
	<!-- =============================================================== -->
	<bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource"  
        destroy-method="close">  
	    <property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
        <!-- 检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：240，如果要取消则设置为0 -->  
        <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />  
        <!-- 连接池中未使用的链接最大存活时间，单位是分，默认值：60，如果要永远存活设置为0 -->  
        <property name="idleMaxAge" value="${jdbc.idleMaxAge}" />  
        <!-- 每个分区最大的连接数 -->  
        <property name="maxConnectionsPerPartition" value="${jdbc.maxConnectionsPerPartition}" />  
        <!-- 每个分区最小的连接数 -->  
        <property name="minConnectionsPerPartition" value="${jdbc.minConnectionsPerPartition}" />  
        <!-- 分区数 ，默认值2，最小1，推荐3-4，视应用而定-->  
        <property name="partitionCount" value="${jdbc.partitionCount}" />  
        <!-- 每次去拿数据库连接的时候一次性要拿几个,默认值：2 -->  
        <property name="acquireIncrement" value="${jdbc.acquireIncrement}" />  
        <!-- 缓存prepared statements的大小，默认值：0 -->  
        <property name="statementsCacheSize" value="${jdbc.statementsCacheSize}" />  
        <!-- 每个分区释放链接助理进程的数量，默认值：3，除非你的一个数据库连接的时间内做了很多工作，不然过多的助理进程会影响你的性能 -->  
        <property name="releaseHelperThreads" value="${jdbc.releaseHelperThreads}" />  
        <property name="logStatementsEnabled" value="true"/>
    </bean>  
    <!-- multi-db配置 -->
    <bean id="vendorProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">  
        <property name="properties">  
            <props>  
                <prop key="SQL Server">sqlserver</prop>  
                <prop key="DB2">db2</prop>  
                <prop key="Oracle">oracle</prop>
                <prop key="MySQL">mysql</prop>  
            </props>  
        </property>  
    </bean>  
    <bean id="databaseIdProvider" class="org.apache.ibatis.mapping.VendorDatabaseIdProvider">  
         <property name="properties" ref="vendorProperties"/>  
    </bean>  
    
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描mapping.xml文件 -->  
        <!-- <property name="mapperLocations" value="classpath:mapping/*.xml"></property> -->
        <!--设置pageHelper-->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="databaseIdProvider" ref="databaseIdProvider"/> 
    </bean> 
    
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
    
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.goodwill.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>   -->
    
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="txManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
    <!-- 事务注解驱动，标注@Transactional的类和方法将具有事务性 -->  
	<tx:annotation-driven transaction-manager="txManager" />  
    <!-- <aop:config>
        <aop:advisor pointcut="execution(* com.goodwill.hdeap.service.impl.HsdqAcsStatJdbcServiceImpl.*(..))" advice-ref="txAdvice"/>
    </aop:config>
    <tx:advice id="txAdvice" transaction-manager="txManager">
    </tx:advice> -->
    
    <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">      
	   <property name="processEngineConfiguration" ref="processEngineConfiguration" />      
	</bean>      
	<bean id="processEngineConfiguration"   class="org.activiti.spring.SpringProcessEngineConfiguration">     
	   <property name="dataSource" ref="dataSource" />   
	   <!-- 事务 -->  
	   <property name="transactionManager" ref="txManager" />   
	   <!-- 数据库自动升级 -->     
	   <property name="databaseSchemaUpdate" value="true" />
	   <!-- 作业执行器 -->       
	   <property name="jobExecutorActivate" value="false" />  
	   <!-- 生成流程图的字体 -->  
       <property name="activityFontName" value="宋体"/>    
       <property name="labelFontName" value="宋体"/>    
       <!-- <property name="customFormTypes">  
         <list>  
           <bean class="org.activiti.explorer.form.UserFormType"/>  
           <bean class="org.activiti.explorer.form.ProcessDefinitionFormType"/>   
           <bean class="org.activiti.explorer.form.MonthFormType"/>     
         </list>  
       </property>  -->     
	</bean>      
	<!-- activiti的各种服务接口 -->   
	<!-- 工作流仓储服务 -->   
	<bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService" />
	<!-- 工作流运行服务 -->      
	<bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService"/>
	<!-- 工作流任务服务-->      
	<bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" />
	<!-- 工作流历史数据服务-->      
	<bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService"/>
	<!-- 工作流管理服务-->       
	<bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" />    
	<bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService" />  

</beans>